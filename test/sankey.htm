
<!DOCTYPE html>
<meta charset="utf-8">
  <link rel="stylesheet" href="//code.jquery.com/ui/1.10.4/themes/smoothness/jquery-ui.css">
<style>

@import url(/css/fbo.css?aea6f0a);

#chart {
  height: 500px;
}

.node rect {
  cursor: move;
  fill-opacity: .9;
  shape-rendering: crispEdges;
}

.node text {
  pointer-events: none;
  text-shadow: 0 1px 0 #fff;
}

.link {
  fill: none;
  stroke: #000;
  stroke-opacity: .2;
}

.link:hover {
  stroke-opacity: .5;
}

</style>
<body>
<h1>test Graph D3</h1>

<p id="chart">
<div id="slider" value="60"></div>
<p id="text">

<script src="http://d3js.org/d3.v3.min.js"></script>
<script src="/js/jquery-2.1.0.js"></script>
<script src="/jquery-ui-1.10.4/ui/jquery-ui.js"></script>
<script src="/js/fbo.js"></script>

 
<script>
var initPadding = 60;

$(function() {
$( "#slider" ).slider({value : initPadding});
});

var margin = {top: 1, right: 1, bottom: 6, left: 1},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var formatNumber = d3.format(",.0f"),
    format = function(d) { return formatNumber(d) + " TWh"; },
    color = d3.scale.category20();

var svg = d3.select("#chart").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var fbo = d3.fbo()
    .nodeWidth(15)
    .nodePadding(initPadding)
    .size([width, height]);

var path = fbo.link();

d3.json("/data/energy2.json", function(energy) {

  fbo
      .nodes(energy.nodes)
      .links(energy.links)
      .layout(32);

  var link = svg.append("g").selectAll(".link")
      .data(energy.links)
    .enter().append("path")
      .attr("class", "link")
      .attr("d", path)
      .style("stroke-width", function(d) { return Math.max(1, d.dy); })
      .sort(function(a, b) { return b.dy - a.dy; });

  link.append("title")
      .text(function(d) { return d.source.name + " ? " + d.target.name + "\n" + format(d.value); });

  var node = svg.append("g").selectAll(".node")
      .data(energy.nodes)
    .enter().append("g")
      .attr("class", "node")
      .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; })
    .call(d3.behavior.drag()
      .origin(function(d) { return d; })
      .on("dragstart", function() { this.parentNode.appendChild(this); })
      .on("drag", dragmove));

  var rects = node.append("rect")
      .attr("height", function(d) { return d.dy; })
      .attr("width", fbo.nodeWidth())
      .style("fill", function(d) { return d.color = color(d.name.replace(/ .*/, "")); })
      .style("stroke", function(d) { return d3.rgb(d.color).darker(2); });
      
  rects
    .append("title")
      .text(function(d) { return d.name + "\n" + format(d.value); });

  node.append("text")
      .attr("x", -6)
      .attr("y", function(d) { return d.dy / 2; })
      .attr("dy", ".35em")
      .attr("text-anchor", "end")
      .attr("transform", null)
      .text(function(d) { return d.name; })
    .filter(function(d) { return d.x < width / 2; })
      .attr("x", 6 + fbo.nodeWidth())
      .attr("text-anchor", "start");

  function dragmove(d) {
    d3.select(this).attr("transform", "translate(" + d.x + "," + (d.y = Math.max(0, Math.min(height - d.dy, d3.event.y))) + ")");
    fbo.relayout();
    link.attr("d", path);
  }
  
  function changeMessage(text) 
  { 
    document.getElementById("text").innerHTML =text; 
  } 

  $( "#slider" ).on( "slide", function( event, ui ) {
  changeMessage(ui.value);
	fbo.nodePadding(ui.value).layout(32);
  link
    .attr("d", path)
    .style("stroke-width", function(d) { return Math.max(1, d.dy); });
  
    node
       .attr("transform", function(d) { return "translate(" + d.x + "," + d.y + ")"; });
 
  rects
      .attr("height", function(d) { return d.dy; })
      .attr("width", fbo.nodeWidth())
      .style("fill", function(d) { return d.color = color(d.name.replace(/ .*/, "")); })
      .style("stroke", function(d) { return d3.rgb(d.color).darker(2); })
      .attr("transform", function(d) { return "translate(" + d.x - this.x + "," + d.y - this.y + ")"; });
 } );
});




</script>
